//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 17 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `prime`.
    static let prime = Rswift.ColorResource(bundle: R.hostingBundle, name: "prime")
    /// Color `tableViewStyleBackCell`.
    static let tableViewStyleBackCell = Rswift.ColorResource(bundle: R.hostingBundle, name: "tableViewStyleBackCell")
    /// Color `tableViewStyleBackground`.
    static let tableViewStyleBackground = Rswift.ColorResource(bundle: R.hostingBundle, name: "tableViewStyleBackground")
    /// Color `text_gray1`.
    static let text_gray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_gray1")
    /// Color `text_gray2`.
    static let text_gray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_gray2")
    /// Color `text_gray3`.
    static let text_gray3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_gray3")
    /// Color `text_gray4`.
    static let text_gray4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_gray4")
    /// Color `text_gray5`.
    static let text_gray5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "text_gray5")
    /// Color `view_able1`.
    static let view_able1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_able1")
    /// Color `view_able_no1`.
    static let view_able_no1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_able_no1")
    /// Color `view_background`.
    static let view_background = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_background")
    /// Color `view_gray1`.
    static let view_gray1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_gray1")
    /// Color `view_gray2`.
    static let view_gray2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_gray2")
    /// Color `view_gray3`.
    static let view_gray3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_gray3")
    /// Color `view_gray4`.
    static let view_gray4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_gray4")
    /// Color `view_gray5`.
    static let view_gray5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "view_gray5")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "prime", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func prime(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.prime, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tableViewStyleBackCell", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tableViewStyleBackCell(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tableViewStyleBackCell, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "tableViewStyleBackground", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func tableViewStyleBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.tableViewStyleBackground, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_gray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_gray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_gray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_gray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_gray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_gray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_gray3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_gray3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_gray3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_gray4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_gray4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_gray4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "text_gray5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func text_gray5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.text_gray5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_able1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_able1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_able1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_able_no1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_able_no1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_able_no1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_background", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_background, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_gray1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_gray1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_gray1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_gray2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_gray2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_gray2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_gray3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_gray3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_gray3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_gray4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_gray4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_gray4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "view_gray5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func view_gray5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.view_gray5, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "prime", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func prime(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.prime.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tableViewStyleBackCell", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tableViewStyleBackCell(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tableViewStyleBackCell.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "tableViewStyleBackground", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func tableViewStyleBackground(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.tableViewStyleBackground.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_gray1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_gray1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_gray1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_gray2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_gray2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_gray2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_gray3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_gray3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_gray3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_gray4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_gray4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_gray4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "text_gray5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func text_gray5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.text_gray5.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_able1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_able1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_able1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_able_no1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_able_no1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_able_no1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_background", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_background(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_background.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_gray1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_gray1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_gray1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_gray2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_gray2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_gray2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_gray3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_gray3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_gray3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_gray4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_gray4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_gray4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "view_gray5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func view_gray5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.view_gray5.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.entitlements` struct is generated, and contains static references to 3 properties.
  struct entitlements {
    static let apsEnvironment = infoPlistString(path: [], key: "aps-environment") ?? "development"
    static let comAppleDeveloperNetworkingWifiInfo = true

    struct comAppleDeveloperAssociatedDomains {
      static let applinksBo5kT4mCn = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:bo5k.t4m.cn") ?? "applinks:bo5k.t4m.cn"
      static let applinksBo5kT4mCnMyCommProject = infoPlistString(path: ["com.apple.developer.associated-domains"], key: "applinks:bo5k.t4m.cn/myCommProject/") ?? "applinks:bo5k.t4m.cn/myCommProject/"

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 5 files.
  struct file {
    /// Resource file `CityCode.json`.
    static let cityCodeJson = Rswift.FileResource(bundle: R.hostingBundle, name: "CityCode", pathExtension: "json")
    /// Resource file `Example_Success.m4a`.
    static let example_SuccessM4a = Rswift.FileResource(bundle: R.hostingBundle, name: "Example_Success", pathExtension: "m4a")
    /// Resource file `area.plist`.
    static let areaPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "area", pathExtension: "plist")
    /// Resource file `locationPoint@2x.png`.
    static let locationPoint2xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "locationPoint@2x", pathExtension: "png")
    /// Resource file `locationPoint@3x.png`.
    static let locationPoint3xPng = Rswift.FileResource(bundle: R.hostingBundle, name: "locationPoint@3x", pathExtension: "png")

    /// `bundle.url(forResource: "CityCode", withExtension: "json")`
    static func cityCodeJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.cityCodeJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "Example_Success", withExtension: "m4a")`
    static func example_SuccessM4a(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.example_SuccessM4a
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "area", withExtension: "plist")`
    static func areaPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.areaPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "locationPoint@2x", withExtension: "png")`
    static func locationPoint2xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.locationPoint2xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    /// `bundle.url(forResource: "locationPoint@3x", withExtension: "png")`
    static func locationPoint3xPng(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.locationPoint3xPng
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 22 images.
  struct image {
    /// Image `EMOJI01-200`.
    static let emoji01200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EMOJI01-200")
    /// Image `EMOJI02-200`.
    static let emoji02200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EMOJI02-200")
    /// Image `EMOJI03-200`.
    static let emoji03200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EMOJI03-200")
    /// Image `EMOJI04-200`.
    static let emoji04200 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EMOJI04-200")
    /// Image `arrow_fat_down_35`.
    static let arrow_fat_down_35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_fat_down_35")
    /// Image `arrow_fat_top_35`.
    static let arrow_fat_top_35 = Rswift.ImageResource(bundle: R.hostingBundle, name: "arrow_fat_top_35")
    /// Image `cry100`.
    static let cry100 = Rswift.ImageResource(bundle: R.hostingBundle, name: "cry100")
    /// Image `icon_cat`.
    static let icon_cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_cat")
    /// Image `icon_footprint`.
    static let icon_footprint = Rswift.ImageResource(bundle: R.hostingBundle, name: "icon_footprint")
    /// Image `locationPoint`.
    static let locationPoint = Rswift.ImageResource(bundle: R.hostingBundle, name: "locationPoint")
    /// Image `navi_back_white`.
    static let navi_back_white = Rswift.ImageResource(bundle: R.hostingBundle, name: "navi_back_white")
    /// Image `navi_back`.
    static let navi_back = Rswift.ImageResource(bundle: R.hostingBundle, name: "navi_back")
    /// Image `navi_close`.
    static let navi_close = Rswift.ImageResource(bundle: R.hostingBundle, name: "navi_close")
    /// Image `switchCamera40`.
    static let switchCamera40 = Rswift.ImageResource(bundle: R.hostingBundle, name: "switchCamera40")
    /// Image `tab1_normal`.
    static let tab1_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab1_normal")
    /// Image `tab1_selected`.
    static let tab1_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab1_selected")
    /// Image `tab2_normal`.
    static let tab2_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab2_normal")
    /// Image `tab2_selected`.
    static let tab2_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab2_selected")
    /// Image `tab3_normal`.
    static let tab3_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab3_normal")
    /// Image `tab3_selected`.
    static let tab3_selected = Rswift.ImageResource(bundle: R.hostingBundle, name: "tab3_selected")
    /// Image `wechat50`.
    static let wechat50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechat50")
    /// Image `wechatTimeLine50`.
    static let wechatTimeLine50 = Rswift.ImageResource(bundle: R.hostingBundle, name: "wechatTimeLine50")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EMOJI01-200", bundle: ..., traitCollection: ...)`
    static func emoji01200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emoji01200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EMOJI02-200", bundle: ..., traitCollection: ...)`
    static func emoji02200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emoji02200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EMOJI03-200", bundle: ..., traitCollection: ...)`
    static func emoji03200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emoji03200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EMOJI04-200", bundle: ..., traitCollection: ...)`
    static func emoji04200(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.emoji04200, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_fat_down_35", bundle: ..., traitCollection: ...)`
    static func arrow_fat_down_35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_fat_down_35, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "arrow_fat_top_35", bundle: ..., traitCollection: ...)`
    static func arrow_fat_top_35(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.arrow_fat_top_35, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "cry100", bundle: ..., traitCollection: ...)`
    static func cry100(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cry100, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_cat", bundle: ..., traitCollection: ...)`
    static func icon_cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_cat, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "icon_footprint", bundle: ..., traitCollection: ...)`
    static func icon_footprint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icon_footprint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "locationPoint", bundle: ..., traitCollection: ...)`
    static func locationPoint(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.locationPoint, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navi_back", bundle: ..., traitCollection: ...)`
    static func navi_back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navi_back, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navi_back_white", bundle: ..., traitCollection: ...)`
    static func navi_back_white(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navi_back_white, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "navi_close", bundle: ..., traitCollection: ...)`
    static func navi_close(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navi_close, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "switchCamera40", bundle: ..., traitCollection: ...)`
    static func switchCamera40(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.switchCamera40, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab1_normal", bundle: ..., traitCollection: ...)`
    static func tab1_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab1_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab1_selected", bundle: ..., traitCollection: ...)`
    static func tab1_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab1_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab2_normal", bundle: ..., traitCollection: ...)`
    static func tab2_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab2_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab2_selected", bundle: ..., traitCollection: ...)`
    static func tab2_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab2_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab3_normal", bundle: ..., traitCollection: ...)`
    static func tab3_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab3_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "tab3_selected", bundle: ..., traitCollection: ...)`
    static func tab3_selected(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tab3_selected, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wechat50", bundle: ..., traitCollection: ...)`
    static func wechat50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechat50, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "wechatTimeLine50", bundle: ..., traitCollection: ...)`
    static func wechatTimeLine50(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wechatTimeLine50, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 35 nibs.
  struct nib {
    /// Nib `CarouselViewController`.
    static let carouselViewController = _R.nib._CarouselViewController()
    /// Nib `CommNavigationBar`.
    static let commNavigationBar = _R.nib._CommNavigationBar()
    /// Nib `CustomMessageView`.
    static let customMessageView = _R.nib._CustomMessageView()
    /// Nib `CustomNavigationViewController`.
    static let customNavigationViewController = _R.nib._CustomNavigationViewController()
    /// Nib `DrawerInfoViewController`.
    static let drawerInfoViewController = _R.nib._DrawerInfoViewController()
    /// Nib `DrawerLeftViewController`.
    static let drawerLeftViewController = _R.nib._DrawerLeftViewController()
    /// Nib `DrawerViewController`.
    static let drawerViewController = _R.nib._DrawerViewController()
    /// Nib `FGChoosCitySearchView`.
    static let fgChoosCitySearchView = _R.nib._FGChoosCitySearchView()
    /// Nib `FGChooseAddressBgView`.
    static let fgChooseAddressBgView = _R.nib._FGChooseAddressBgView()
    /// Nib `FGCurAddressCell`.
    static let fgCurAddressCell = _R.nib._FGCurAddressCell()
    /// Nib `FGSearchHeaderView`.
    static let fgSearchHeaderView = _R.nib._FGSearchHeaderView()
    /// Nib `FaceIDViewController`.
    static let faceIDViewController = _R.nib._FaceIDViewController()
    /// Nib `FaceRecognitionViewController`.
    static let faceRecognitionViewController = _R.nib._FaceRecognitionViewController()
    /// Nib `GridViewController`.
    static let gridViewController = _R.nib._GridViewController()
    /// Nib `HXPPImageCell`.
    static let hxppImageCell = _R.nib._HXPPImageCell()
    /// Nib `ImagePicker1ViewController`.
    static let imagePicker1ViewController = _R.nib._ImagePicker1ViewController()
    /// Nib `JGSharePlatformPicker`.
    static let jgSharePlatformPicker = _R.nib._JGSharePlatformPicker()
    /// Nib `LocationViewController`.
    static let locationViewController = _R.nib._LocationViewController()
    /// Nib `MarqueeViewController`.
    static let marqueeViewController = _R.nib._MarqueeViewController()
    /// Nib `MessageAlertViewController`.
    static let messageAlertViewController = _R.nib._MessageAlertViewController()
    /// Nib `PopMenuCustomViewController`.
    static let popMenuCustomViewController = _R.nib._PopMenuCustomViewController()
    /// Nib `QRCodeViewController`.
    static let qrCodeViewController = _R.nib._QRCodeViewController()
    /// Nib `SLDiscoverViewController`.
    static let slDiscoverViewController = _R.nib._SLDiscoverViewController()
    /// Nib `SLHomeView`.
    static let slHomeView = _R.nib._SLHomeView()
    /// Nib `SLLoginViewController`.
    static let slLoginViewController = _R.nib._SLLoginViewController()
    /// Nib `SLNoNetworkViewController`.
    static let slNoNetworkViewController = _R.nib._SLNoNetworkViewController()
    /// Nib `SLNoNetworkView`.
    static let slNoNetworkView = _R.nib._SLNoNetworkView()
    /// Nib `SLVisitorViewController`.
    static let slVisitorViewController = _R.nib._SLVisitorViewController()
    /// Nib `ScrollMsgCell`.
    static let scrollMsgCell = _R.nib._ScrollMsgCell()
    /// Nib `SoundViewController`.
    static let soundViewController = _R.nib._SoundViewController()
    /// Nib `StarViewController`.
    static let starViewController = _R.nib._StarViewController()
    /// Nib `TapticViewController`.
    static let tapticViewController = _R.nib._TapticViewController()
    /// Nib `ToastViewController`.
    static let toastViewController = _R.nib._ToastViewController()
    /// Nib `Transition2ViewController`.
    static let transition2ViewController = _R.nib._Transition2ViewController()
    /// Nib `TransitionViewController`.
    static let transitionViewController = _R.nib._TransitionViewController()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CarouselViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.carouselViewController) instead")
    static func carouselViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.carouselViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CommNavigationBar", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.commNavigationBar) instead")
    static func commNavigationBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.commNavigationBar)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomMessageView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customMessageView) instead")
    static func customMessageView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customMessageView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CustomNavigationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.customNavigationViewController) instead")
    static func customNavigationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.customNavigationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrawerInfoViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drawerInfoViewController) instead")
    static func drawerInfoViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drawerInfoViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrawerLeftViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drawerLeftViewController) instead")
    static func drawerLeftViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drawerLeftViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "DrawerViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.drawerViewController) instead")
    static func drawerViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.drawerViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FGChoosCitySearchView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fgChoosCitySearchView) instead")
    static func fgChoosCitySearchView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fgChoosCitySearchView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FGChooseAddressBgView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fgChooseAddressBgView) instead")
    static func fgChooseAddressBgView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fgChooseAddressBgView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FGCurAddressCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fgCurAddressCell) instead")
    static func fgCurAddressCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fgCurAddressCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FGSearchHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.fgSearchHeaderView) instead")
    static func fgSearchHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fgSearchHeaderView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaceIDViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faceIDViewController) instead")
    static func faceIDViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faceIDViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "FaceRecognitionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.faceRecognitionViewController) instead")
    static func faceRecognitionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.faceRecognitionViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GridViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gridViewController) instead")
    static func gridViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gridViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HXPPImageCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.hxppImageCell) instead")
    static func hxppImageCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.hxppImageCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ImagePicker1ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.imagePicker1ViewController) instead")
    static func imagePicker1ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.imagePicker1ViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "JGSharePlatformPicker", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.jgSharePlatformPicker) instead")
    static func jgSharePlatformPicker(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.jgSharePlatformPicker)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "LocationViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.locationViewController) instead")
    static func locationViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.locationViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MarqueeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.marqueeViewController) instead")
    static func marqueeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.marqueeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "MessageAlertViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.messageAlertViewController) instead")
    static func messageAlertViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.messageAlertViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "PopMenuCustomViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.popMenuCustomViewController) instead")
    static func popMenuCustomViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.popMenuCustomViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "QRCodeViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.qrCodeViewController) instead")
    static func qrCodeViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.qrCodeViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLDiscoverViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slDiscoverViewController) instead")
    static func slDiscoverViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slDiscoverViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLHomeView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slHomeView) instead")
    static func slHomeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slHomeView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLLoginViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slLoginViewController) instead")
    static func slLoginViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slLoginViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLNoNetworkView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slNoNetworkView) instead")
    static func slNoNetworkView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slNoNetworkView)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLNoNetworkViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slNoNetworkViewController) instead")
    static func slNoNetworkViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slNoNetworkViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SLVisitorViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.slVisitorViewController) instead")
    static func slVisitorViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.slVisitorViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ScrollMsgCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.scrollMsgCell) instead")
    static func scrollMsgCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.scrollMsgCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "SoundViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.soundViewController) instead")
    static func soundViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.soundViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "StarViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.starViewController) instead")
    static func starViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.starViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TapticViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.tapticViewController) instead")
    static func tapticViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tapticViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ToastViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.toastViewController) instead")
    static func toastViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.toastViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "Transition2ViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transition2ViewController) instead")
    static func transition2ViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transition2ViewController)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TransitionViewController", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.transitionViewController) instead")
    static func transitionViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.transitionViewController)
    }
    #endif

    static func carouselViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.carouselViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func commNavigationBar(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommNavigationBar? {
      return R.nib.commNavigationBar.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommNavigationBar
    }

    static func customMessageView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomMessageView? {
      return R.nib.customMessageView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomMessageView
    }

    static func customNavigationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.customNavigationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func drawerInfoViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.drawerInfoViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func drawerLeftViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.drawerLeftViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func drawerViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.drawerViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func faceIDViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.faceIDViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func faceRecognitionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.faceRecognitionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func fgChoosCitySearchView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGChoosCitySearchView? {
      return R.nib.fgChoosCitySearchView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGChoosCitySearchView
    }

    static func fgChooseAddressBgView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGChooseAddressBgView? {
      return R.nib.fgChooseAddressBgView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGChooseAddressBgView
    }

    static func fgCurAddressCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGCurAddressCell? {
      return R.nib.fgCurAddressCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGCurAddressCell
    }

    static func fgSearchHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGSearchHeaderView? {
      return R.nib.fgSearchHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGSearchHeaderView
    }

    static func gridViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.gridViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func hxppImageCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HXPPImageCell? {
      return R.nib.hxppImageCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HXPPImageCell
    }

    static func imagePicker1ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.imagePicker1ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func jgSharePlatformPicker(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.jgSharePlatformPicker.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func locationViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.locationViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func marqueeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.marqueeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func messageAlertViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.messageAlertViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func popMenuCustomViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.popMenuCustomViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func qrCodeViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.qrCodeViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func scrollMsgCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollMsgCell? {
      return R.nib.scrollMsgCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollMsgCell
    }

    static func slDiscoverViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slDiscoverViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func slHomeView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SLHomeView? {
      return R.nib.slHomeView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SLHomeView
    }

    static func slLoginViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slLoginViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func slNoNetworkView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SLNoNetworkView? {
      return R.nib.slNoNetworkView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SLNoNetworkView
    }

    static func slNoNetworkViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slNoNetworkViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func slVisitorViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.slVisitorViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func soundViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.soundViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func starViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.starViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func tapticViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.tapticViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func toastViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.toastViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transition2ViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transition2ViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    static func transitionViewController(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
      return R.nib.transitionViewController.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 2 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `FGCurAddressCell`.
    static let fgCurAddressCell: Rswift.ReuseIdentifier<FGCurAddressCell> = Rswift.ReuseIdentifier(identifier: "FGCurAddressCell")
    /// Reuse identifier `HXPPImageCell`.
    static let hxppImageCell: Rswift.ReuseIdentifier<HXPPImageCell> = Rswift.ReuseIdentifier(identifier: "HXPPImageCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _CommNavigationBar.validate()
      try _FGChoosCitySearchView.validate()
      try _FGChooseAddressBgView.validate()
      try _FaceRecognitionViewController.validate()
      try _JGSharePlatformPicker.validate()
      try _SLNoNetworkViewController.validate()
      try _SLVisitorViewController.validate()
      try _ScrollMsgCell.validate()
      try _StarViewController.validate()
    }

    struct _CarouselViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CarouselViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _CommNavigationBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CommNavigationBar"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CommNavigationBar? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CommNavigationBar
      }

      static func validate() throws {
        if UIKit.UIImage(named: "navi_back", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'navi_back' is used in nib 'CommNavigationBar', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _CustomMessageView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomMessageView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CustomMessageView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CustomMessageView
      }

      fileprivate init() {}
    }

    struct _CustomNavigationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "CustomNavigationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DrawerInfoViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DrawerInfoViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DrawerLeftViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DrawerLeftViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _DrawerViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DrawerViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FGChoosCitySearchView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FGChoosCitySearchView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGChoosCitySearchView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGChoosCitySearchView
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "magnifyingglass") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'magnifyingglass' is used in nib 'FGChoosCitySearchView', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "text_gray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_gray1' is used in nib 'FGChoosCitySearchView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "text_gray3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_gray3' is used in nib 'FGChoosCitySearchView', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_gray3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_gray3' is used in nib 'FGChoosCitySearchView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FGChooseAddressBgView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FGChooseAddressBgView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGChooseAddressBgView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGChooseAddressBgView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "arrow_fat_top_35", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'arrow_fat_top_35' is used in nib 'FGChooseAddressBgView', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "text_gray4", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_gray4' is used in nib 'FGChooseAddressBgView', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _FGCurAddressCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = FGCurAddressCell

      let bundle = R.hostingBundle
      let identifier = "FGCurAddressCell"
      let name = "FGCurAddressCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGCurAddressCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGCurAddressCell
      }

      fileprivate init() {}
    }

    struct _FGSearchHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FGSearchHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> FGSearchHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? FGSearchHeaderView
      }

      fileprivate init() {}
    }

    struct _FaceIDViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FaceIDViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _FaceRecognitionViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "FaceRecognitionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "switchCamera40", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'switchCamera40' is used in nib 'FaceRecognitionViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _GridViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GridViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _HXPPImageCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HXPPImageCell

      let bundle = R.hostingBundle
      let identifier = "HXPPImageCell"
      let name = "HXPPImageCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HXPPImageCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HXPPImageCell
      }

      fileprivate init() {}
    }

    struct _ImagePicker1ViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ImagePicker1ViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _JGSharePlatformPicker: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "JGSharePlatformPicker"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "wechat50", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wechat50' is used in nib 'JGSharePlatformPicker', but couldn't be loaded.") }
        if UIKit.UIImage(named: "wechatTimeLine50", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'wechatTimeLine50' is used in nib 'JGSharePlatformPicker', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "view_gray1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_gray1' is used in nib 'JGSharePlatformPicker', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _LocationViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LocationViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MarqueeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MarqueeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _MessageAlertViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "MessageAlertViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _PopMenuCustomViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "PopMenuCustomViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _QRCodeViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "QRCodeViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SLDiscoverViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SLDiscoverViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SLHomeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SLHomeView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SLHomeView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SLHomeView
      }

      fileprivate init() {}
    }

    struct _SLLoginViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SLLoginViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _SLNoNetworkView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SLNoNetworkView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> SLNoNetworkView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SLNoNetworkView
      }

      fileprivate init() {}
    }

    struct _SLNoNetworkViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SLNoNetworkViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cry100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cry100' is used in nib 'SLNoNetworkViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "text_gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_gray2' is used in nib 'SLNoNetworkViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_able1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_able1' is used in nib 'SLNoNetworkViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_background' is used in nib 'SLNoNetworkViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _SLVisitorViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SLVisitorViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cry100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cry100' is used in nib 'SLVisitorViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "text_gray2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'text_gray2' is used in nib 'SLVisitorViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_able1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_able1' is used in nib 'SLVisitorViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_background", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_background' is used in nib 'SLVisitorViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _ScrollMsgCell: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "ScrollMsgCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ScrollMsgCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ScrollMsgCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "cry100", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'cry100' is used in nib 'ScrollMsgCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }

    struct _SoundViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SoundViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _StarViewController: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "StarViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EMOJI03-200", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EMOJI03-200' is used in nib 'StarViewController', but couldn't be loaded.") }
        if UIKit.UIImage(named: "EMOJI04-200", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EMOJI04-200' is used in nib 'StarViewController', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "prime", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'prime' is used in nib 'StarViewController', but couldn't be loaded.") }
          if UIKit.UIColor(named: "view_able_no1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'view_able_no1' is used in nib 'StarViewController', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _TapticViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TapticViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _ToastViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ToastViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _Transition2ViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "Transition2ViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    struct _TransitionViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TransitionViewController"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "EMOJI04-200", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EMOJI04-200' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = ViewController

      let bundle = R.hostingBundle
      let name = "Main"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
